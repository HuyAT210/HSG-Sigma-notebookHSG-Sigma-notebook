Pre-submit:
Write a few simple test cases if sample is not enough.
Could anything overflow?
Is the memory usage fine?
Are time limits close? If so, generate max cases.
Make sure to submit the right file.

Wrong answer:
Print your solution! Print debug output, as well.
Create some testcases to run your algorithm on.
Do you handle all corner cases correctly?
Any overflows?
Confusing N and M, i and j, etc.?
Is your output format correct? (including whitespace)
Read the full problem statement again.
Have you understood the problem correctly?
Are you sure your algorithm works?
What special cases have you not thought of?
Go through the algorithm for a simple case.
Any uninitialized variables?
Are you clearing all data structures between test cases?
Can your algorithm handle the whole range of input?
Are you sure the STL functions you use work as you think?
Add some assertions, maybe resubmit.
Go through this list again.
Explain your algorithm to a teammate.
Ask the teammate to look at your code.
Go for a small walk, e.g. to the toilet.
Rewrite your solution from the start or let a teammate do it.

Runtime error:
Have you tested all corner cases locally?
Any uninitialized variables?
Are you reading or writing outside the range of any vector?
Invalidated pointers or iterators?
Any assertions that might fail?
Any possible division by 0? (mod 0 for example)
Any possible infinite recursion?
Are you using too much memory?

Time limit exceeded:
What is the complexity of your algorithm?
How big is the input and output? (consider scanf/fastinput)
Avoid vector, map, set. (use arrays/unordered_map/sorting/pq)
Are you copying a lot of unnecessary data? (References)
Do you have any possible infinite loops? (Ex: par[p] = p)
What do your teammates think about your algorithm?

Memory limit exceeded:
What is the max amount of memory your algorithm should need?
Are you clearing all data structures between test cases?
